import jsonimport timeimport osfrom dotenv import load_dotenvfrom openai import OpenAIfrom deepseek import APIConnectionError, APIError, RateLimitError# 1. 获取 API 密钥load_dotenv()API_KEY = os.getenv("DEEPSEEK_API_KEY")if not API_KEY:    print("⚠️ 错误：找不到环境变量 DEEPSEEK_API_KEY！请先设置它。")    exit(1)# 2. API 端点API_URL = "https://api.deepseek.com"# 生成摘要def make_abstract(session_key = sessionkey):    # TODO    abs_history = "目前是一段虚假的摘要生成。"    return abs_historydef send_to_api(mode="deepseek-chat", abstract=0, session_key = sessionkey,api_key=API_KEY):    client = OpenAI(api_key=api_key, base_url=API_URL)    if abstract:        abs_history = make_abstract(session_key)        messages = abs_history    else:        messages = []    payload = {        "model": mode,        "messages": messages,        "max_tokens": 8000    }    # TODO: 当后续程序完成后，这里应改回空字符串    thinking = "这是一段测试用的虚假thinking"    answer = "这是一段测试文本，你并没有连接到API"    try:        print("⏳ 正在向 DeepSeek API 发送请求...")        start_time = time.time()        # 此处是流式显示（打字机效果）        response = client.chat.completions.create(            model=mode,            messages=messages,            stream=True        )        if response.ok:            thinking = ""            answer = ""        # 流式现实中，可能在每一个小块中发生一场，所以这里应把流式显示也包括进来        for chunk in response:            if chunk.choices[0].delta.reasoning_content:                thinking += chunk.choices[0].delta.reasoning_content            else:                answer += chunk.choices[0].delta.content    # 具体处理每一种异常    except APIConnectionError as e:        print(f"网络连接失败: {e}")    except RateLimitError as e:        print("触发速率限制，请稍后重试")    except APIError as e:        print(f"API 服务错误: {e.status_code} - {e.message}")    except Exception as e:        print(f"其他错误: {e}")        import traceback        traceback.print_exc()    finally:        end_time = time.time()        dauer = end_time - start_time        print(f"\n⌛ 请求耗时: {dauer:.2f}秒")    ai_reply = [thinking, answer]    return ai_reply, dauerif __name__ == "__main__":    ai_reply, dauer = send_to_api()